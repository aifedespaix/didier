// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file server_time.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * ServerTime communicates the authoritative server time in milliseconds.
 *
 * @generated from message protocol.ServerTime
 */
export class ServerTime extends Message<ServerTime> {
  /**
   * Version of the server time schema.
   *
   * @generated from field: uint32 version = 1;
   */
  version = 0;

  /**
   * Unix epoch time in milliseconds.
   *
   * @generated from field: uint64 unix_milliseconds = 2;
   */
  unixMilliseconds = protoInt64.zero;

  constructor(data?: PartialMessage<ServerTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.ServerTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "unix_milliseconds", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerTime {
    return new ServerTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerTime {
    return new ServerTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerTime {
    return new ServerTime().fromJsonString(jsonString, options);
  }

  static equals(a: ServerTime | PlainMessage<ServerTime> | undefined, b: ServerTime | PlainMessage<ServerTime> | undefined): boolean {
    return proto3.util.equals(ServerTime, a, b);
  }
}

