// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file snapshot.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * Snapshot represents the authoritative game state at a point in time.
 *
 * @generated from message protocol.Snapshot
 */
export class Snapshot extends Message<Snapshot> {
  /**
   * Version of the snapshot schema.
   *
   * @generated from field: uint32 version = 1;
   */
  version = 0;

  /**
   * Positions of all entities flattened as x,y pairs.
   *
   * @generated from field: repeated float positions = 2;
   */
  positions: number[] = [];

  constructor(data?: PartialMessage<Snapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocol.Snapshot';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'version', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    {
      no: 2,
      name: 'positions',
      kind: 'scalar',
      T: 2 /* ScalarType.FLOAT */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Snapshot {
    return new Snapshot().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Snapshot {
    return new Snapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Snapshot {
    return new Snapshot().fromJsonString(jsonString, options);
  }

  static equals(
    a: Snapshot | PlainMessage<Snapshot> | undefined,
    b: Snapshot | PlainMessage<Snapshot> | undefined
  ): boolean {
    return proto3.util.equals(Snapshot, a, b);
  }
}
