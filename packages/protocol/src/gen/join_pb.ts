// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file join.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Join is sent by a client to initiate a session.
 *
 * @generated from message protocol.Join
 */
export class Join extends Message<Join> {
  /**
   * Version of the join schema.
   *
   * @generated from field: uint32 version = 1;
   */
  version = 0;

  constructor(data?: PartialMessage<Join>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.Join";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Join {
    return new Join().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Join {
    return new Join().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Join {
    return new Join().fromJsonString(jsonString, options);
  }

  static equals(a: Join | PlainMessage<Join> | undefined, b: Join | PlainMessage<Join> | undefined): boolean {
    return proto3.util.equals(Join, a, b);
  }
}

