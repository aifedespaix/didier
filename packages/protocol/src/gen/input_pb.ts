// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file input.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Input represents player input for a single tick.
 *
 * @generated from message protocol.Input
 */
export class Input extends Message<Input> {
  /**
   * Version of the input schema.
   *
   * @generated from field: uint32 version = 1;
   */
  version = 0;

  /**
   * Horizontal movement axis.
   *
   * @generated from field: float horizontal = 2;
   */
  horizontal = 0;

  /**
   * Vertical movement axis.
   *
   * @generated from field: float vertical = 3;
   */
  vertical = 0;

  constructor(data?: PartialMessage<Input>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.Input";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "horizontal", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "vertical", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Input {
    return new Input().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Input {
    return new Input().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Input {
    return new Input().fromJsonString(jsonString, options);
  }

  static equals(a: Input | PlainMessage<Input> | undefined, b: Input | PlainMessage<Input> | undefined): boolean {
    return proto3.util.equals(Input, a, b);
  }
}

