// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file ack.proto (package protocol, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Ack acknowledges the latest processed input tick.
 *
 * @generated from message protocol.Ack
 */
export class Ack extends Message<Ack> {
  /**
   * Version of the ack schema.
   *
   * @generated from field: uint32 version = 1;
   */
  version = 0;

  /**
   * The tick of the last processed input.
   *
   * @generated from field: uint32 input_tick = 2;
   */
  inputTick = 0;

  constructor(data?: PartialMessage<Ack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocol.Ack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "input_tick", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ack {
    return new Ack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ack {
    return new Ack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ack {
    return new Ack().fromJsonString(jsonString, options);
  }

  static equals(a: Ack | PlainMessage<Ack> | undefined, b: Ack | PlainMessage<Ack> | undefined): boolean {
    return proto3.util.equals(Ack, a, b);
  }
}

